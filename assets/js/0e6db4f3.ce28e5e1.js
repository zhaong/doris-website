"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[851303],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>h});var r=n(296540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=i(n),y=a,h=p["".concat(c,".").concat(y)]||p[y]||d[y]||o;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},697516:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=n(58168),a=(n(296540),n(15680));const o={title:"QuickStart",language:"en"},l=void 0,s={unversionedId:"admin-manual/data-admin/ccr/quickstart",id:"admin-manual/data-admin/ccr/quickstart",title:"QuickStart",description:"\x3c!--",source:"@site/docs/admin-manual/data-admin/ccr/quickstart.md",sourceDirName:"admin-manual/data-admin/ccr",slug:"/admin-manual/data-admin/ccr/quickstart",permalink:"/docs/dev/admin-manual/data-admin/ccr/quickstart",draft:!1,tags:[],version:"current",frontMatter:{title:"QuickStart",language:"en"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/dev/admin-manual/data-admin/ccr/overview"},next:{title:"Feature Details",permalink:"/docs/dev/admin-manual/data-admin/ccr/feature"}},c={},i=[{value:"Step 1. Deploy the source Doris cluster",id:"step-1-deploy-the-source-doris-cluster",level:2},{value:"Step 2. Deploy the target Doris cluster",id:"step-2-deploy-the-target-doris-cluster",level:2},{value:"Step 3. Enable binlog in both the source and target clusters",id:"step-3-enable-binlog-in-both-the-source-and-target-clusters",level:2},{value:"Step 4. Deploy Syncer",id:"step-4-deploy-syncer",level:2},{value:"Step 5. Enable binlog in the source db or table",id:"step-5-enable-binlog-in-the-source-db-or-table",level:2},{value:"Step 6. Launch a synchronization task to the Syncer",id:"step-6-launch-a-synchronization-task-to-the-syncer",level:2}],u={toc:i},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"The usage of CCR is straightforward. Simply start the syncer service and send a command, and the Syncer will take care of the rest."),(0,a.yg)("h2",{id:"step-1-deploy-the-source-doris-cluster"},"Step 1. Deploy the source Doris cluster"),(0,a.yg)("h2",{id:"step-2-deploy-the-target-doris-cluster"},"Step 2. Deploy the target Doris cluster"),(0,a.yg)("h2",{id:"step-3-enable-binlog-in-both-the-source-and-target-clusters"},"Step 3. Enable binlog in both the source and target clusters"),(0,a.yg)("p",null,"Both the source and target clusters need to enable binlog. Configure the following information in the fe.conf and be.conf files of the source and target clusters:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-SQL"},"enable_feature_binlog=true\n")),(0,a.yg)("h2",{id:"step-4-deploy-syncer"},"Step 4. Deploy Syncer"),(0,a.yg)("p",null,"\u200bBuild CCR Syncer"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/selectdb/ccr-syncer\ncd ccr-syncer   \nbash build.sh <-j NUM_OF_THREAD> <--output SYNCER_OUTPUT_DIR>\ncd SYNCER_OUTPUT_DIR# Contact the Doris community for a free CCR binary package\n")),(0,a.yg)("p",null,"Start and stop Syncer"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"# Start\ncd bin && sh start_syncer.sh --daemon\n\n# Stop\nsh stop_syncer.sh\n")),(0,a.yg)("h2",{id:"step-5-enable-binlog-in-the-source-db-or-table"},"Step 5. Enable binlog in the source db or table"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'-- If you want to synchronize the entire database, you can execute the following script:\nvim shell/enable_db_binlog.sh\nModify host, port, user, password, and db in the source cluster\nOr ./enable_db_binlog.sh --host $host --port $port --user $user --password $password --db $db\n\n-- If you want to synchronize a single table, you can execute the following script and enable binlog for the target table:\nALTER TABLE enable_binlog SET ("binlog.enable" = "true");\n')),(0,a.yg)("h2",{id:"step-6-launch-a-synchronization-task-to-the-syncer"},"Step 6. Launch a synchronization task to the Syncer"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'curl -X POST -H "Content-Type: application/json" -d \'{\n    "name": "ccr_test",\n    "src": {\n      "host": "localhost",\n      "port": "9030",\n      "thrift_port": "9020",\n      "user": "root",\n      "password": "",\n      "database": "your_db_name",\n      "table": "your_table_name"\n    },\n    "dest": {\n      "host": "localhost",\n      "port": "9030",\n      "thrift_port": "9020",\n      "user": "root",\n      "password": "",\n      "database": "your_db_name",\n      "table": "your_table_name"\n    }\n}\' http://127.0.0.1:9190/create_ccr\n')),(0,a.yg)("p",null,"Parameter description:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"name: name of the CCR synchronization task, should be unique\nhost, port: host and mysql(jdbc) port for the master FE for the corresponding cluster\nuser, password: the credentials used by the Syncer to initiate transactions, fetch data, etc.\nIf it is synchronization at the database level, specify your_db_name and leave your_table_name empty\nIf it is synchronization at the table level, specify both your_db_name and your_table_name\nThe synchronization task name can only be used once.\n")))}d.isMDXComponent=!0}}]);